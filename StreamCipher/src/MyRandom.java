import java.util.Random;

public class MyRandom  extends Random {
    //Generated by Mathematica, m is a large prime that fits in the "long" range
    private static final long m = 1705533417848243881L;  
    private static final long a = 17; //Primitive root to m, calculated with Mathematica
    private long seed;

    public MyRandom() throws IllegalArgumentException{
        this(System.nanoTime());
    }

    public MyRandom(long seed) throws IllegalArgumentException{
        // seed = 0 should be avoided according to D. H. Lehmers PRNG
        if (seed == 0){
            throw new IllegalArgumentException("The seed cannot be zero");
        }
        else
            setSeed(seed);
    }

    @Override
    public void setSeed(long seed){
        this.seed = seed;
    }

    @Override
    public int next(int bits){
        long nextRandom = (((a * seed)) % m);
        int mask = (1 << bits) - 1; // create a bit mask with the specified number of bits
        int maskedInt = (int) (nextRandom & mask); // mask to only include the specified number of bits 
        seed = maskedInt; 
        return maskedInt;
    }
}
